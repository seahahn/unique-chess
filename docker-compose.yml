version: '3.8'

services:
  # SolidStart Web Application
  webapp:
    build:
      context: .
      dockerfile: workspaces/webapp/Dockerfile.dev
    container_name: unique-chess-webapp
    ports:
      - "3000:3000"
    volumes:
      - .:/application
      - node_modules:/application/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: pnpm run --filter=@unique-chess/webapp dev
    networks:
      - unique-chess-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: unique-chess-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: unique_chess
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d unique_chess"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - unique-chess-network

  # pgAdmin (Database Management UI)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: unique-chess-pgadmin
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@uniquechess.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - unique-chess-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: unique-chess-minio
    ports:
      - "9000:9000"   # API
      - "9001:9001"   # Console
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - unique-chess-network

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: unique-chess-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - unique-chess-network

  # WebSocket Server
  websocket:
    build:
      context: .
      dockerfile: workspaces/websocket/Dockerfile.dev
    container_name: unique-chess-websocket
    ports:
      - "8080:8080"
    volumes:
      - .:/application
      - node_modules:/application/node_modules
    environment:
      - NODE_ENV=development
      - PORT=8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: pnpm run --filter=@unique-chess/websocket dev
    networks:
      - unique-chess-network

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local
  node_modules:
    driver: local

networks:
  unique-chess-network:
    driver: bridge